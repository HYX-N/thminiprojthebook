package thminiprojthebook.demo;

import thminiprojthebook.domain.*;
import thminiprojthebook.test.AiTestConfig;
import java.util.Date;

/**
 * AI 어그리게이트 독립 데모 클래스
 * - 다른 어그리게이트에 의존하지 않고 AI 기능만 테스트
 * - 커버 생성 및 이벤트 발행 과정 시연
 */
public class AiAggregateDemo {
    
    public static void main(String[] args) {
        System.out.println("=== AI 어그리게이트 독립 테스트 시작 ===\n");
        
        // 1. BookRegisted 이벤트 시뮬레이션
        BookRegisted bookEvent = createTestBookEvent();
        displayBookEvent(bookEvent);
        
        // 2. CoverDesign 생성 과정 시뮬레이션
        CoverDesign coverDesign = simulateCoverGeneration(bookEvent);
        displayCoverDesign(coverDesign);
        
        // 3. CoverCreated 이벤트 생성
        CoverCreated coverCreatedEvent = createCoverCreatedEvent(coverDesign);
        displayCoverCreatedEvent(coverCreatedEvent);
        
        // 4. AiProcessTracker 상태 추적
        AiProcessTracker tracker = simulateProcessTracking(bookEvent, coverDesign);
        displayProcessTracker(tracker);
        
        // 5. 전체 프로세스 완료 이벤트
        BookAiProcessCompleted completedEvent = createCompletedEvent(tracker);
        displayCompletedEvent(completedEvent);
        
        System.out.println("\n=== AI 어그리게이트 독립 테스트 완료 ===");
    }
    
    private static BookRegisted createTestBookEvent() {
        BookRegisted event = new BookRegisted();
        event.setBookId(1001L);
        event.setTitle("디지털 혁신과 AI의 미래");
        event.setContext("4차 산업혁명 시대, 인공지능과 디지털 기술이 가져올 사회 변화를 예측하고 대응 방안을 제시하는 실용서입니다. 블록체인, IoT, 빅데이터와 AI의 융합을 다룹니다.");
        event.setAuthorId(2001L);
        event.setRegistration(true);
        return event;
    }
    
    private static void displayBookEvent(BookRegisted event) {
        System.out.println("📚 BookRegisted 이벤트 수신");
        System.out.println("   Book ID: " + event.getBookId());
        System.out.println("   Title: " + event.getTitle());
        System.out.println("   Author ID: " + event.getAuthorId());
        System.out.println("   Context 길이: " + event.getContext().length() + " 문자");
        System.out.println();
    }
    
    private static CoverDesign simulateCoverGeneration(BookRegisted event) {
        System.out.println("🎨 커버 디자인 생성 과정 시뮬레이션");
        
        // Mock DalleService 사용
        AiTestConfig.MockDalleService mockService = new AiTestConfig.MockDalleService();
        String imageUrl = mockService.generateCoverImage(event.getTitle(), event.getContext());
        
        CoverDesign coverDesign = new CoverDesign();
        coverDesign.setId(1L);
        coverDesign.setAuthorId(event.getAuthorId());
        coverDesign.setBookId(event.getBookId().toString());
        coverDesign.setTitle(event.getTitle());
        coverDesign.setImageUrl(imageUrl);
        coverDesign.setGeneratedBy("DALL-E-3");
        coverDesign.setCreatedAt(new Date());
        coverDesign.setUpdatedAt(new Date());
        
        return coverDesign;
    }
    
    private static void displayCoverDesign(CoverDesign coverDesign) {
        System.out.println("✅ 커버 디자인 생성 완료");
        System.out.println("   ID: " + coverDesign.getId());
        System.out.println("   Title: " + coverDesign.getTitle());
        System.out.println("   Image URL: " + coverDesign.getImageUrl());
        System.out.println("   Generated By: " + coverDesign.getGeneratedBy());
        System.out.println("   Created At: " + coverDesign.getCreatedAt());
        System.out.println();
    }
    
    private static CoverCreated createCoverCreatedEvent(CoverDesign coverDesign) {
        CoverCreated event = new CoverCreated(coverDesign);
        event.setId(coverDesign.getId());
        event.setAuthorId(coverDesign.getAuthorId());
        event.setBookId(coverDesign.getBookId());
        event.setTitle(coverDesign.getTitle());
        event.setImageUrl(coverDesign.getImageUrl());
        event.setGeneratedBy(coverDesign.getGeneratedBy());
        event.setCreatedAt(coverDesign.getCreatedAt().toString());
        return event;
    }
    
    private static void displayCoverCreatedEvent(CoverCreated event) {
        System.out.println("📤 CoverCreated 이벤트 발행");
        System.out.println("   Event Type: " + event.getClass().getSimpleName());
        System.out.println("   Book ID: " + event.getBookId());
        System.out.println("   Title: " + event.getTitle());
        System.out.println("   Image URL: " + event.getImageUrl());
        System.out.println("   Generated By: " + event.getGeneratedBy());
        System.out.println();
    }
    
    private static AiProcessTracker simulateProcessTracking(BookRegisted bookEvent, CoverDesign coverDesign) {
        System.out.println("📊 AI 프로세스 추적 시뮬레이션");
        
        AiProcessTracker tracker = new AiProcessTracker();
        tracker.setBookId(bookEvent.getBookId().toString());
        tracker.setTitle(bookEvent.getTitle());
        tracker.setAuthorId(bookEvent.getAuthorId());
        
        // 커버 생성 완료 표시
        tracker.markCoverGenerationCompleted(coverDesign.getImageUrl(), coverDesign.getGeneratedBy());
        
        // 컨텐츠 분석도 완료 표시 (시뮬레이션)
        tracker.markContentAnalysisCompleted(
            "디지털 혁신과 AI 기술의 융합을 다루는 실용적 가이드북",
            "Technology/Business",
            "Korean",
            1500
        );
        
        return tracker;
    }
    
    private static void displayProcessTracker(AiProcessTracker tracker) {
        System.out.println("✅ AI 프로세스 추적 상태");
        System.out.println("   Book: " + tracker.getTitle());
        System.out.println("   Cover Generation: " + (tracker.getCoverGenerationCompleted() ? "✅" : "⏳"));
        System.out.println("   Content Analysis: " + (tracker.getContentAnalysisCompleted() ? "✅" : "⏳"));
        System.out.println("   Classification: " + tracker.getClassificationType());
        System.out.println("   Summary: " + tracker.getSummary());
        System.out.println("   Completed At: " + tracker.getCompletedAt());
        System.out.println();
    }
    
    private static BookAiProcessCompleted createCompletedEvent(AiProcessTracker tracker) {
        BookAiProcessCompleted event = new BookAiProcessCompleted();
        event.setAuthorId(tracker.getAuthorId());
        event.setBookId(tracker.getBookId());
        event.setTitle(tracker.getTitle());
        
        // Content Analysis 데이터
        event.setSummary(tracker.getSummary());
        event.setClassificationType(tracker.getClassificationType());
        event.setLanguage(tracker.getLanguage());
        event.setMaxLength(tracker.getMaxLength());
        
        // Cover Design 데이터
        event.setImageUrl(tracker.getImageUrl());
        event.setGeneratedBy(tracker.getGeneratedBy());
        event.setCoverCreatedAt(tracker.getCreatedAt());
        
        // 상태 플래그
        event.setContentAnalysisCompleted(tracker.getContentAnalysisCompleted());
        event.setCoverGenerationCompleted(tracker.getCoverGenerationCompleted());
        event.setCompletedAt(tracker.getCompletedAt());
        
        return event;
    }
    
    private static void displayCompletedEvent(BookAiProcessCompleted event) {
        System.out.println("🎉 BookAiProcessCompleted 통합 이벤트 발행");
        System.out.println("   Book: " + event.getTitle());
        System.out.println("   Author ID: " + event.getAuthorId());
        System.out.println("   Summary: " + event.getSummary());
        System.out.println("   Classification: " + event.getClassificationType());
        System.out.println("   Language: " + event.getLanguage());
        System.out.println("   Cover URL: " + event.getImageUrl());
        System.out.println("   Generated By: " + event.getGeneratedBy());
        System.out.println("   All Processes Completed: " + 
            (event.getContentAnalysisCompleted() && event.getCoverGenerationCompleted() ? "✅" : "❌"));
        System.out.println();
    }
}
