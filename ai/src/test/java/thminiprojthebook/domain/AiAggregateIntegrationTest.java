package thminiprojthebook.domain;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.test.context.ActiveProfiles;
import thminiprojthebook.service.DalleService;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

/**
 * AI 어그리게이트 독립 통합 테스트
 * - DalleService 모킹을 통한 실제 API 호출 없이 테스트
 * - 커버 생성 및 분류 과정의 전체 플로우 검증
 * - 이벤트 발행 및 상태 변경 검증
 */
@ExtendWith(MockitoExtension.class)
@ActiveProfiles("test")
public class AiAggregateIntegrationTest {

    @Mock
    private DalleService dalleService;

    private BookRegisted testBookEvent;

    @BeforeEach
    void setUp() {
        // 테스트용 BookRegisted 이벤트 생성
        testBookEvent = new BookRegisted();
        testBookEvent.setBookId(1L);
        testBookEvent.setTitle("AI와 머신러닝의 미래");
        testBookEvent.setContext("인공지능과 머신러닝 기술이 우리 사회에 미치는 영향과 미래 전망에 대한 연구서입니다. 딥러닝, 자연어 처리, 컴퓨터 비전 등의 최신 기술 동향을 분석합니다.");
        testBookEvent.setAuthorId(123L);
        testBookEvent.setRegistration(true);
    }

    @Test
    void testCoverDesign_전체_플로우_성공() {
        // Given - DalleService가 성공적으로 이미지 URL 반환
        String expectedImageUrl = "https://oaidalleapiprodscus.blob.core.windows.net/private/generated-cover-123.png";
        when(dalleService.generateCoverImage(anyString(), anyString()))
            .thenReturn(expectedImageUrl);

        // When - CoverDesign 객체 생성 및 데이터 설정 (실제 로직 시뮬레이션)
        CoverDesign coverDesign = new CoverDesign();
        coverDesign.setId(1L);
        coverDesign.setAuthorId(testBookEvent.getAuthorId());
        coverDesign.setBookId(testBookEvent.getBookId().toString());
        coverDesign.setTitle(testBookEvent.getTitle());
        coverDesign.setGeneratedBy("DALL-E-3");
        
        // DalleService 호출 시뮬레이션
        String generatedImageUrl = dalleService.generateCoverImage(
            testBookEvent.getTitle(),
            testBookEvent.getContext()
        );
        coverDesign.setImageUrl(generatedImageUrl);

        // Then - 검증
        assertNotNull(coverDesign);
        assertEquals("AI와 머신러닝의 미래", coverDesign.getTitle());
        assertEquals("1", coverDesign.getBookId());
        assertEquals(Long.valueOf(123L), coverDesign.getAuthorId());
        assertEquals("DALL-E-3", coverDesign.getGeneratedBy());
        assertEquals(expectedImageUrl, coverDesign.getImageUrl());

        // DalleService가 올바른 파라미터로 호출되었는지 확인
        verify(dalleService).generateCoverImage(
            eq("AI와 머신러닝의 미래"),
            eq("인공지능과 머신러닝 기술이 우리 사회에 미치는 영향과 미래 전망에 대한 연구서입니다. 딥러닝, 자연어 처리, 컴퓨터 비전 등의 최신 기술 동향을 분석합니다.")
        );
    }

    @Test
    void testCoverCreated_이벤트_발행_검증() {
        // Given
        CoverDesign coverDesign = new CoverDesign();
        coverDesign.setId(1L);
        coverDesign.setAuthorId(123L);
        coverDesign.setBookId("1");
        coverDesign.setTitle("AI와 머신러닝의 미래");
        coverDesign.setImageUrl("https://example.com/cover.jpg");
        coverDesign.setGeneratedBy("DALL-E-3");
        coverDesign.setCreatedAt(new java.util.Date());

        // When - CoverCreated 이벤트 생성
        CoverCreated coverCreatedEvent = new CoverCreated(coverDesign);
        coverCreatedEvent.setId(coverDesign.getId());
        coverCreatedEvent.setAuthorId(coverDesign.getAuthorId());
        coverCreatedEvent.setBookId(coverDesign.getBookId());
        coverCreatedEvent.setTitle(coverDesign.getTitle());
        coverCreatedEvent.setImageUrl(coverDesign.getImageUrl());
        coverCreatedEvent.setGeneratedBy(coverDesign.getGeneratedBy());
        coverCreatedEvent.setCreatedAt(coverDesign.getCreatedAt().toString());

        // Then - 이벤트 데이터 검증
        assertNotNull(coverCreatedEvent);
        assertEquals(coverDesign.getId(), coverCreatedEvent.getId());
        assertEquals(coverDesign.getAuthorId(), coverCreatedEvent.getAuthorId());
        assertEquals(coverDesign.getBookId(), coverCreatedEvent.getBookId());
        assertEquals(coverDesign.getTitle(), coverCreatedEvent.getTitle());
        assertEquals(coverDesign.getImageUrl(), coverCreatedEvent.getImageUrl());
        assertEquals(coverDesign.getGeneratedBy(), coverCreatedEvent.getGeneratedBy());
        
        System.out.println("=== CoverCreated 이벤트 발행 테스트 성공 ===");
        System.out.println("Book ID: " + coverCreatedEvent.getBookId());
        System.out.println("Title: " + coverCreatedEvent.getTitle());
        System.out.println("Image URL: " + coverCreatedEvent.getImageUrl());
        System.out.println("Generated By: " + coverCreatedEvent.getGeneratedBy());
    }

    @Test
    void testAiProcessTracker_진행상황_추적() {
        // Given
        AiProcessTracker tracker = new AiProcessTracker();
        tracker.setBookId("1");
        tracker.setTitle("AI와 머신러닝의 미래");
        tracker.setAuthorId(123L);

        // When - 커버 생성 완료 표시
        tracker.markCoverGenerationCompleted(
            "https://example.com/cover.jpg",
            "DALL-E-3"
        );

        // Then - 상태 검증
        assertTrue(tracker.getCoverGenerationCompleted());
        assertFalse(tracker.getContentAnalysisCompleted()); // 아직 컨텐츠 분석은 미완료
        assertEquals("https://example.com/cover.jpg", tracker.getImageUrl());
        assertEquals("DALL-E-3", tracker.getGeneratedBy());
        assertNull(tracker.getCompletedAt()); // 전체 완료는 아직 아님

        System.out.println("=== AI Process Tracker 상태 ===");
        System.out.println("Cover Generation: " + (tracker.getCoverGenerationCompleted() ? "✅" : "⏳"));
        System.out.println("Content Analysis: " + (tracker.getContentAnalysisCompleted() ? "✅" : "⏳"));
        System.out.println("Image URL: " + tracker.getImageUrl());
    }

    @Test
    void testDalleService_실패시_예외처리() {
        // Given - DalleService가 null 반환 (실패 시나리오)
        when(dalleService.generateCoverImage(anyString(), anyString()))
            .thenReturn(null);

        // When
        String result = dalleService.generateCoverImage(
            testBookEvent.getTitle(),
            testBookEvent.getContext()
        );

        // Then
        assertNull(result);
        verify(dalleService).generateCoverImage(anyString(), anyString());
        
        System.out.println("=== DALL-E 서비스 실패 처리 테스트 ===");
        System.out.println("결과: " + (result == null ? "실패 처리 성공" : "예상과 다른 결과"));
    }

    @Test
    void testBookAiProcessCompleted_통합이벤트() {
        // Given - 모든 AI 프로세스가 완료된 상황
        BookAiProcessCompleted completedEvent = new BookAiProcessCompleted();
        completedEvent.setAuthorId(123L);
        completedEvent.setBookId("1");
        completedEvent.setTitle("AI와 머신러닝의 미래");
        
        // Content Analysis 데이터
        completedEvent.setSummary("AI와 머신러닝의 미래에 대한 포괄적인 분석서");
        completedEvent.setClassificationType("Technology");
        completedEvent.setLanguage("Korean");
        completedEvent.setMaxLength(1000);
        
        // Cover Design 데이터
        completedEvent.setImageUrl("https://example.com/cover.jpg");
        completedEvent.setGeneratedBy("DALL-E-3");
        completedEvent.setCoverCreatedAt(new java.util.Date());
        
        // 상태 플래그
        completedEvent.setContentAnalysisCompleted(true);
        completedEvent.setCoverGenerationCompleted(true);

        // Then - 통합 이벤트 데이터 검증
        assertNotNull(completedEvent);
        assertEquals("1", completedEvent.getBookId());
        assertEquals("AI와 머신러닝의 미래", completedEvent.getTitle());
        assertTrue(completedEvent.getContentAnalysisCompleted());
        assertTrue(completedEvent.getCoverGenerationCompleted());
        assertEquals("Technology", completedEvent.getClassificationType());
        assertEquals("https://example.com/cover.jpg", completedEvent.getImageUrl());
        
        System.out.println("=== BookAiProcessCompleted 통합 이벤트 ===");
        System.out.println("Book: " + completedEvent.getTitle());
        System.out.println("Summary: " + completedEvent.getSummary());
        System.out.println("Classification: " + completedEvent.getClassificationType());
        System.out.println("Cover URL: " + completedEvent.getImageUrl());
        System.out.println("모든 AI 프로세스 완료: ✅");
    }

    @Test
    void testBookRegisted_이벤트_검증() {
        // Given & When - 이미 setUp()에서 생성됨

        // Then - BookRegisted 이벤트 데이터 검증
        assertNotNull(testBookEvent);
        assertEquals(Long.valueOf(1L), testBookEvent.getBookId());
        assertEquals("AI와 머신러닝의 미래", testBookEvent.getTitle());
        assertTrue(testBookEvent.getContext().contains("인공지능"));
        assertTrue(testBookEvent.getContext().contains("머신러닝"));
        assertEquals(Long.valueOf(123L), testBookEvent.getAuthorId());
        assertTrue(testBookEvent.getRegistration());
        
        System.out.println("=== BookRegisted 이벤트 수신 ===");
        System.out.println("Book ID: " + testBookEvent.getBookId());
        System.out.println("Title: " + testBookEvent.getTitle());
        System.out.println("Author ID: " + testBookEvent.getAuthorId());
        System.out.println("Context Length: " + testBookEvent.getContext().length());
    }
}
